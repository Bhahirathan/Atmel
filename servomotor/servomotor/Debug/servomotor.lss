
servomotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000019e  00000212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008ad  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065d  00000000  00000000  00000b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c4  00000000  00000000  000011ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  000015b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000380  00000000  00000000  0000166c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000038f  00000000  00000000  000019ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001d7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e9       	ldi	r30, 0x9E	; 158
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 36       	cpi	r26, 0x62	; 98
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	5a d0       	rcall	.+180    	; 0x10e <main>
  5a:	9f c0       	rjmp	.+318    	; 0x19a <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <uart_init>:

unsigned int adcdata,adcdata1;

 void adc_init()
 {
  ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaler to 64
  5e:	1b b8       	out	0x0b, r1	; 11
  60:	10 bc       	out	0x20, r1	; 32
  62:	88 e0       	ldi	r24, 0x08	; 8
  64:	89 b9       	out	0x09, r24	; 9
  66:	88 e1       	ldi	r24, 0x18	; 24
  68:	8a b9       	out	0x0a, r24	; 10
  6a:	86 e8       	ldi	r24, 0x86	; 134
  6c:	80 bd       	out	0x20, r24	; 32
  6e:	08 95       	ret

00000070 <uart_char>:
  70:	5d 9b       	sbis	0x0b, 5	; 11
  72:	fe cf       	rjmp	.-4      	; 0x70 <uart_char>
  74:	8c b9       	out	0x0c, r24	; 12
  76:	08 95       	ret

00000078 <uart_string>:
  78:	cf 93       	push	r28
  7a:	df 93       	push	r29
  7c:	ec 01       	movw	r28, r24
  7e:	88 81       	ld	r24, Y
  80:	88 23       	and	r24, r24
  82:	29 f0       	breq	.+10     	; 0x8e <uart_string+0x16>
  84:	21 96       	adiw	r28, 0x01	; 1
  86:	f4 df       	rcall	.-24     	; 0x70 <uart_char>
  88:	89 91       	ld	r24, Y+
  8a:	81 11       	cpse	r24, r1
  8c:	fc cf       	rjmp	.-8      	; 0x86 <uart_string+0xe>
  8e:	87 ea       	ldi	r24, 0xA7	; 167
  90:	91 e6       	ldi	r25, 0x61	; 97
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <uart_string+0x1a>
  96:	00 c0       	rjmp	.+0      	; 0x98 <uart_string+0x20>
  98:	00 00       	nop
  9a:	df 91       	pop	r29
  9c:	cf 91       	pop	r28
  9e:	08 95       	ret

000000a0 <uart_num>:
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	28 2f       	mov	r18, r24
  a6:	39 e2       	ldi	r19, 0x29	; 41
  a8:	83 9f       	mul	r24, r19
  aa:	31 2d       	mov	r19, r1
  ac:	11 24       	eor	r1, r1
  ae:	32 95       	swap	r19
  b0:	3f 70       	andi	r19, 0x0F	; 15
  b2:	4c e9       	ldi	r20, 0x9C	; 156
  b4:	43 03       	mulsu	r20, r19
  b6:	c0 01       	movw	r24, r0
  b8:	11 24       	eor	r1, r1
  ba:	82 0f       	add	r24, r18
  bc:	91 1d       	adc	r25, r1
  be:	6a e0       	ldi	r22, 0x0A	; 10
  c0:	70 e0       	ldi	r23, 0x00	; 0
  c2:	44 d0       	rcall	.+136    	; 0x14c <__divmodhi4>
  c4:	d6 2f       	mov	r29, r22
  c6:	20 5d       	subi	r18, 0xD0	; 208
  c8:	c2 2f       	mov	r28, r18
  ca:	34 9f       	mul	r19, r20
  cc:	c0 0d       	add	r28, r0
  ce:	11 24       	eor	r1, r1
  d0:	80 e3       	ldi	r24, 0x30	; 48
  d2:	83 0f       	add	r24, r19
  d4:	cd df       	rcall	.-102    	; 0x70 <uart_char>
  d6:	80 e3       	ldi	r24, 0x30	; 48
  d8:	8d 0f       	add	r24, r29
  da:	ca df       	rcall	.-108    	; 0x70 <uart_char>
  dc:	dd 0f       	add	r29, r29
  de:	8d 2f       	mov	r24, r29
  e0:	88 0f       	add	r24, r24
  e2:	88 0f       	add	r24, r24
  e4:	d8 0f       	add	r29, r24
  e6:	8c 2f       	mov	r24, r28
  e8:	8d 1b       	sub	r24, r29
  ea:	c2 df       	rcall	.-124    	; 0x70 <uart_char>
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <getdata>:
  		
 }
 unsigned char getdata(unsigned char chno)	
  {
    ADMUX=0X60;						//right align the ADC result
  f2:	90 e6       	ldi	r25, 0x60	; 96
  f4:	97 b9       	out	0x07, r25	; 7
    ADMUX|=chno;					//select the ADC channel
  f6:	97 b1       	in	r25, 0x07	; 7
  f8:	89 2b       	or	r24, r25
  fa:	87 b9       	out	0x07, r24	; 7
    ADCSRA|=0X40;					//start ADC convertion
  fc:	36 9a       	sbi	0x06, 6	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	89 ef       	ldi	r24, 0xF9	; 249
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <getdata+0x10>
 106:	00 c0       	rjmp	.+0      	; 0x108 <getdata+0x16>
 108:	00 00       	nop
    _delay_ms(1);					//give some time delay to complit the aDC convertion
	return ADCH;
 10a:	85 b1       	in	r24, 0x05	; 5
  }
 10c:	08 95       	ret

0000010e <main>:
#define MYP0 (0)


int main(void)
{
	DDRB |= (1<<PB1);	/* Make OC1A pin as output */
 10e:	b9 9a       	sbi	0x17, 1	; 23
	DDRD |=0xff;
 110:	81 b3       	in	r24, 0x11	; 17
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	81 bb       	out	0x11, r24	; 17
	uart_init();
 116:	a3 df       	rcall	.-186    	; 0x5e <uart_init>
	TCNT1 = 0;		/* Set timer1 count zero */
 118:	1d bc       	out	0x2d, r1	; 45
 11a:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 2499;		/* Set TOP count for timer1 in ICR1 register */
 11c:	83 ec       	ldi	r24, 0xC3	; 195
 11e:	99 e0       	ldi	r25, 0x09	; 9
 120:	97 bd       	out	0x27, r25	; 39
 122:	86 bd       	out	0x26, r24	; 38
	int co=65;
	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	TCCR1A = (1<<WGM11)|(1<<COM1A1);
 124:	82 e8       	ldi	r24, 0x82	; 130
 126:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
 128:	8b e1       	ldi	r24, 0x1B	; 27
 12a:	8e bd       	out	0x2e, r24	; 46
	{
		/*if(co==301)
		{
			co=65;
		}*/
		co=getdata(1);
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	e1 df       	rcall	.-62     	; 0xf2 <getdata>
 130:	2f eb       	ldi	r18, 0xBF	; 191
 132:	37 e2       	ldi	r19, 0x27	; 39
 134:	99 e0       	ldi	r25, 0x09	; 9
 136:	21 50       	subi	r18, 0x01	; 1
 138:	30 40       	sbci	r19, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x28>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x32>
 140:	00 00       	nop
		//OCR1A = co;	/* Set servo shaft at -90° position */
		_delay_ms(3000); 
		//co++;
		uart_num(co);
 142:	ae df       	rcall	.-164    	; 0xa0 <uart_num>
		uart_string("\n");
 144:	80 e6       	ldi	r24, 0x60	; 96
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	97 df       	rcall	.-210    	; 0x78 <uart_string>
 14a:	f0 cf       	rjmp	.-32     	; 0x12c <main+0x1e>

0000014c <__divmodhi4>:
 14c:	97 fb       	bst	r25, 7
 14e:	07 2e       	mov	r0, r23
 150:	16 f4       	brtc	.+4      	; 0x156 <__divmodhi4+0xa>
 152:	00 94       	com	r0
 154:	06 d0       	rcall	.+12     	; 0x162 <__divmodhi4_neg1>
 156:	77 fd       	sbrc	r23, 7
 158:	08 d0       	rcall	.+16     	; 0x16a <__divmodhi4_neg2>
 15a:	0b d0       	rcall	.+22     	; 0x172 <__udivmodhi4>
 15c:	07 fc       	sbrc	r0, 7
 15e:	05 d0       	rcall	.+10     	; 0x16a <__divmodhi4_neg2>
 160:	3e f4       	brtc	.+14     	; 0x170 <__divmodhi4_exit>

00000162 <__divmodhi4_neg1>:
 162:	90 95       	com	r25
 164:	81 95       	neg	r24
 166:	9f 4f       	sbci	r25, 0xFF	; 255
 168:	08 95       	ret

0000016a <__divmodhi4_neg2>:
 16a:	70 95       	com	r23
 16c:	61 95       	neg	r22
 16e:	7f 4f       	sbci	r23, 0xFF	; 255

00000170 <__divmodhi4_exit>:
 170:	08 95       	ret

00000172 <__udivmodhi4>:
 172:	aa 1b       	sub	r26, r26
 174:	bb 1b       	sub	r27, r27
 176:	51 e1       	ldi	r21, 0x11	; 17
 178:	07 c0       	rjmp	.+14     	; 0x188 <__udivmodhi4_ep>

0000017a <__udivmodhi4_loop>:
 17a:	aa 1f       	adc	r26, r26
 17c:	bb 1f       	adc	r27, r27
 17e:	a6 17       	cp	r26, r22
 180:	b7 07       	cpc	r27, r23
 182:	10 f0       	brcs	.+4      	; 0x188 <__udivmodhi4_ep>
 184:	a6 1b       	sub	r26, r22
 186:	b7 0b       	sbc	r27, r23

00000188 <__udivmodhi4_ep>:
 188:	88 1f       	adc	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	5a 95       	dec	r21
 18e:	a9 f7       	brne	.-22     	; 0x17a <__udivmodhi4_loop>
 190:	80 95       	com	r24
 192:	90 95       	com	r25
 194:	bc 01       	movw	r22, r24
 196:	cd 01       	movw	r24, r26
 198:	08 95       	ret

0000019a <_exit>:
 19a:	f8 94       	cli

0000019c <__stop_program>:
 19c:	ff cf       	rjmp	.-2      	; 0x19c <__stop_program>

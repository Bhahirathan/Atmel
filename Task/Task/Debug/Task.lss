
Task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009d6  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074c  00000000  00000000  00000bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000419  00000000  00000000  0000133e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00001758  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a0  00000000  00000000  00001814  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003fa  00000000  00000000  00001bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001fae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  74:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <uart_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	1b b8       	out	0x0b, r1	; 11
  7e:	10 bc       	out	0x20, r1	; 32
  80:	88 e0       	ldi	r24, 0x08	; 8
  82:	89 b9       	out	0x09, r24	; 9
  84:	88 e1       	ldi	r24, 0x18	; 24
  86:	8a b9       	out	0x0a, r24	; 10
  88:	86 e8       	ldi	r24, 0x86	; 134
  8a:	80 bd       	out	0x20, r24	; 32
  8c:	08 95       	ret

0000008e <main>:


int main(void)
{
	int i,j;
	DDRB=0b11111111;
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	87 bb       	out	0x17, r24	; 23
	DDRA =(1<<7);
  92:	80 e8       	ldi	r24, 0x80	; 128
  94:	8a bb       	out	0x1a, r24	; 26

unsigned int adcdata,adcdata1;

 void adc_init()
 {
  ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaler to 64
  96:	86 e8       	ldi	r24, 0x86	; 134
  98:	86 b9       	out	0x06, r24	; 6
		adc_init();
		uart_init();
  9a:	0e 94 3e 00 	call	0x7c	; 0x7c <uart_init>
    /* Replace with your application code */
    while (1) 
    {
		PORTB= 0b00011000;
  9e:	38 e1       	ldi	r19, 0x18	; 24
		_delay_ms(1000);
		PORTB= 0b00100100; 
  a0:	24 e2       	ldi	r18, 0x24	; 36
		_delay_ms(1000);
		PORTB= 0b01000010;
  a2:	92 e4       	ldi	r25, 0x42	; 66
		_delay_ms(1000);
		PORTB= 0b10000001;
  a4:	81 e8       	ldi	r24, 0x81	; 129
		adc_init();
		uart_init();
    /* Replace with your application code */
    while (1) 
    {
		PORTB= 0b00011000;
  a6:	38 bb       	out	0x18, r19	; 24
  a8:	4f ef       	ldi	r20, 0xFF	; 255
  aa:	53 ed       	ldi	r21, 0xD3	; 211
  ac:	60 e3       	ldi	r22, 0x30	; 48
  ae:	41 50       	subi	r20, 0x01	; 1
  b0:	50 40       	sbci	r21, 0x00	; 0
  b2:	60 40       	sbci	r22, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x20>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x2a>
  b8:	00 00       	nop
		_delay_ms(1000);
		PORTB= 0b00100100; 
  ba:	28 bb       	out	0x18, r18	; 24
  bc:	4f ef       	ldi	r20, 0xFF	; 255
  be:	53 ed       	ldi	r21, 0xD3	; 211
  c0:	60 e3       	ldi	r22, 0x30	; 48
  c2:	41 50       	subi	r20, 0x01	; 1
  c4:	50 40       	sbci	r21, 0x00	; 0
  c6:	60 40       	sbci	r22, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x34>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x3e>
  cc:	00 00       	nop
		_delay_ms(1000);
		PORTB= 0b01000010;
  ce:	98 bb       	out	0x18, r25	; 24
  d0:	4f ef       	ldi	r20, 0xFF	; 255
  d2:	53 ed       	ldi	r21, 0xD3	; 211
  d4:	60 e3       	ldi	r22, 0x30	; 48
  d6:	41 50       	subi	r20, 0x01	; 1
  d8:	50 40       	sbci	r21, 0x00	; 0
  da:	60 40       	sbci	r22, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x48>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x52>
  e0:	00 00       	nop
		_delay_ms(1000);
		PORTB= 0b10000001;
  e2:	88 bb       	out	0x18, r24	; 24
  e4:	4f ef       	ldi	r20, 0xFF	; 255
  e6:	53 ed       	ldi	r21, 0xD3	; 211
  e8:	60 e3       	ldi	r22, 0x30	; 48
  ea:	41 50       	subi	r20, 0x01	; 1
  ec:	50 40       	sbci	r21, 0x00	; 0
  ee:	60 40       	sbci	r22, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x5c>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x66>
  f4:	00 00       	nop
  f6:	d7 cf       	rjmp	.-82     	; 0xa6 <main+0x18>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>

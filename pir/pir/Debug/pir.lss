
pir.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000190  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008ba  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a6  00000000  00000000  00000b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c5  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  000015fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000369  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000335  00000000  00000000  00001a21  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001d56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e9       	ldi	r30, 0x90	; 144
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 36       	cpi	r26, 0x62	; 98
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	5a d0       	rcall	.+180    	; 0x10e <main>
  5a:	98 c0       	rjmp	.+304    	; 0x18c <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <getdata>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5e:	90 e6       	ldi	r25, 0x60	; 96
  60:	97 b9       	out	0x07, r25	; 7
  62:	97 b1       	in	r25, 0x07	; 7
  64:	89 2b       	or	r24, r25
  66:	87 b9       	out	0x07, r24	; 7
  68:	36 9a       	sbi	0x06, 6	; 6
  6a:	89 ef       	ldi	r24, 0xF9	; 249
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	01 97       	sbiw	r24, 0x01	; 1
  70:	f1 f7       	brne	.-4      	; 0x6e <getdata+0x10>
  72:	00 c0       	rjmp	.+0      	; 0x74 <getdata+0x16>
  74:	00 00       	nop
  76:	85 b1       	in	r24, 0x05	; 5
  78:	08 95       	ret

0000007a <uart_init>:
  7a:	1b b8       	out	0x0b, r1	; 11
  7c:	10 bc       	out	0x20, r1	; 32
  7e:	88 e0       	ldi	r24, 0x08	; 8
  80:	89 b9       	out	0x09, r24	; 9
  82:	88 e1       	ldi	r24, 0x18	; 24
  84:	8a b9       	out	0x0a, r24	; 10
  86:	86 e8       	ldi	r24, 0x86	; 134
  88:	80 bd       	out	0x20, r24	; 32
  8a:	08 95       	ret

0000008c <uart_char>:
  8c:	5d 9b       	sbis	0x0b, 5	; 11
  8e:	fe cf       	rjmp	.-4      	; 0x8c <uart_char>
  90:	8c b9       	out	0x0c, r24	; 12
  92:	08 95       	ret

00000094 <uart_string>:
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	ec 01       	movw	r28, r24
  9a:	88 81       	ld	r24, Y
  9c:	88 23       	and	r24, r24
  9e:	29 f0       	breq	.+10     	; 0xaa <uart_string+0x16>
  a0:	21 96       	adiw	r28, 0x01	; 1
  a2:	f4 df       	rcall	.-24     	; 0x8c <uart_char>
  a4:	89 91       	ld	r24, Y+
  a6:	81 11       	cpse	r24, r1
  a8:	fc cf       	rjmp	.-8      	; 0xa2 <uart_string+0xe>
  aa:	87 ea       	ldi	r24, 0xA7	; 167
  ac:	91 e6       	ldi	r25, 0x61	; 97
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <uart_string+0x1a>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <uart_string+0x20>
  b4:	00 00       	nop
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <uart_num>:
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	28 2f       	mov	r18, r24
  c2:	39 e2       	ldi	r19, 0x29	; 41
  c4:	83 9f       	mul	r24, r19
  c6:	31 2d       	mov	r19, r1
  c8:	11 24       	eor	r1, r1
  ca:	32 95       	swap	r19
  cc:	3f 70       	andi	r19, 0x0F	; 15
  ce:	4c e9       	ldi	r20, 0x9C	; 156
  d0:	43 03       	mulsu	r20, r19
  d2:	c0 01       	movw	r24, r0
  d4:	11 24       	eor	r1, r1
  d6:	82 0f       	add	r24, r18
  d8:	91 1d       	adc	r25, r1
  da:	6a e0       	ldi	r22, 0x0A	; 10
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	2f d0       	rcall	.+94     	; 0x13e <__divmodhi4>
  e0:	d6 2f       	mov	r29, r22
  e2:	20 5d       	subi	r18, 0xD0	; 208
  e4:	c2 2f       	mov	r28, r18
  e6:	34 9f       	mul	r19, r20
  e8:	c0 0d       	add	r28, r0
  ea:	11 24       	eor	r1, r1
  ec:	80 e3       	ldi	r24, 0x30	; 48
  ee:	83 0f       	add	r24, r19
  f0:	cd df       	rcall	.-102    	; 0x8c <uart_char>
  f2:	80 e3       	ldi	r24, 0x30	; 48
  f4:	8d 0f       	add	r24, r29
  f6:	ca df       	rcall	.-108    	; 0x8c <uart_char>
  f8:	dd 0f       	add	r29, r29
  fa:	8d 2f       	mov	r24, r29
  fc:	88 0f       	add	r24, r24
  fe:	88 0f       	add	r24, r24
 100:	d8 0f       	add	r29, r24
 102:	8c 2f       	mov	r24, r28
 104:	8d 1b       	sub	r24, r29
 106:	c2 df       	rcall	.-124    	; 0x8c <uart_char>
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <main>:
#define LED_OUTPUT	PORTB
#define PIR_Input	PINC

int main(void)
{
	DDRC = 0x00;	/* Set the PIR port as input port */
 10e:	14 ba       	out	0x14, r1	; 20
	DDRB = 0xff;
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	87 bb       	out	0x17, r24	; 23

unsigned int adcdata,adcdata1;

 void adc_init()
 {
  ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaler to 64
 114:	86 e8       	ldi	r24, 0x86	; 134
 116:	86 b9       	out	0x06, r24	; 6
	adc_init();
	uart_init();
 118:	b0 df       	rcall	.-160    	; 0x7a <uart_init>
	unsigned char val;
    /* Replace with your application code */
    while (1) 
    {
		LED_OUTPUT = PIR_Input;
 11a:	83 b3       	in	r24, 0x13	; 19
 11c:	88 bb       	out	0x18, r24	; 24
		val=getdata(1);
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	9e df       	rcall	.-196    	; 0x5e <getdata>
		uart_num(val);
 122:	cc df       	rcall	.-104    	; 0xbc <uart_num>
		uart_string("\n");
 124:	80 e6       	ldi	r24, 0x60	; 96
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	b5 df       	rcall	.-150    	; 0x94 <uart_string>
 12a:	2f eb       	ldi	r18, 0xBF	; 191
 12c:	81 e9       	ldi	r24, 0x91	; 145
 12e:	91 e2       	ldi	r25, 0x21	; 33
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x22>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x2c>
 13a:	00 00       	nop
 13c:	ee cf       	rjmp	.-36     	; 0x11a <main+0xc>

0000013e <__divmodhi4>:
 13e:	97 fb       	bst	r25, 7
 140:	07 2e       	mov	r0, r23
 142:	16 f4       	brtc	.+4      	; 0x148 <__divmodhi4+0xa>
 144:	00 94       	com	r0
 146:	06 d0       	rcall	.+12     	; 0x154 <__divmodhi4_neg1>
 148:	77 fd       	sbrc	r23, 7
 14a:	08 d0       	rcall	.+16     	; 0x15c <__divmodhi4_neg2>
 14c:	0b d0       	rcall	.+22     	; 0x164 <__udivmodhi4>
 14e:	07 fc       	sbrc	r0, 7
 150:	05 d0       	rcall	.+10     	; 0x15c <__divmodhi4_neg2>
 152:	3e f4       	brtc	.+14     	; 0x162 <__divmodhi4_exit>

00000154 <__divmodhi4_neg1>:
 154:	90 95       	com	r25
 156:	81 95       	neg	r24
 158:	9f 4f       	sbci	r25, 0xFF	; 255
 15a:	08 95       	ret

0000015c <__divmodhi4_neg2>:
 15c:	70 95       	com	r23
 15e:	61 95       	neg	r22
 160:	7f 4f       	sbci	r23, 0xFF	; 255

00000162 <__divmodhi4_exit>:
 162:	08 95       	ret

00000164 <__udivmodhi4>:
 164:	aa 1b       	sub	r26, r26
 166:	bb 1b       	sub	r27, r27
 168:	51 e1       	ldi	r21, 0x11	; 17
 16a:	07 c0       	rjmp	.+14     	; 0x17a <__udivmodhi4_ep>

0000016c <__udivmodhi4_loop>:
 16c:	aa 1f       	adc	r26, r26
 16e:	bb 1f       	adc	r27, r27
 170:	a6 17       	cp	r26, r22
 172:	b7 07       	cpc	r27, r23
 174:	10 f0       	brcs	.+4      	; 0x17a <__udivmodhi4_ep>
 176:	a6 1b       	sub	r26, r22
 178:	b7 0b       	sbc	r27, r23

0000017a <__udivmodhi4_ep>:
 17a:	88 1f       	adc	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	5a 95       	dec	r21
 180:	a9 f7       	brne	.-22     	; 0x16c <__udivmodhi4_loop>
 182:	80 95       	com	r24
 184:	90 95       	com	r25
 186:	bc 01       	movw	r22, r24
 188:	cd 01       	movw	r24, r26
 18a:	08 95       	ret

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
